/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */

package group.pals.desktop.app.apksigner.utils.ui

import group.pals.desktop.app.apksigner.i18n.Messages
import group.pals.desktop.app.apksigner.i18n.R
import group.pals.desktop.app.apksigner.utils.Texts

import java.awt.Component
import java.awt.Container
import java.awt.Toolkit
import java.awt.datatransfer.DataFlavor
import java.awt.event.ActionEvent

import javax.swing.Action
import javax.swing.JMenuItem
import javax.swing.JPasswordField
import javax.swing.JPopupMenu
import javax.swing.text.JTextComponent
import javax.swing.text.TextAction

/**
 * Editor popup menu for {@link JTextComponent}.
 *
 * @author Hai Bison
 * @since v1.6 beta
 */
object JEditorPopupMenu {

    private lazy final val CLASSNAME = classOf[JEditorPopupMenu].getName()

    /**
     * Action CUT.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_CUT = CLASSNAME + ".cut"

    /**
     * Action COPY.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_COPY = CLASSNAME + ".copy"

    /**
     * Action COPY ALL.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_COPY_ALL = CLASSNAME + ".copy-all"

    /**
     * Action PASTE.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_PASTE = CLASSNAME + ".paste"

    /**
     * Action CLEAR AND PASTE.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_CLEAR_AND_PASTE = CLASSNAME + ".clear-and-paste"

    /**
     * Action CLEAR.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_CLEAR = CLASSNAME + ".clear"

    /**
     * Action DELETE.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_DELETE = CLASSNAME + ".delete"

    /**
     * Action SELECT ALL.
     * <p>
     * Used in {@link Component#firePropertyChange(String, long, long)}.
     * </p>
     */
    lazy final val ACTION_NAME_SELECT_ALL = CLASSNAME + ".select-all"

    private var _instance: JEditorPopupMenu = null
    def instance: JEditorPopupMenu = {
        if (_instance == null) _instance = new JEditorPopupMenu()
        _instance
    }// instance()

    /**
     * Applies the global instance of this menu to all sub components of
     * {@code container} which are {@link JTextComponent}.
     * <p>
     * You can also obtain the global instance of this menu via
     * {@link #getInstance()}.
     * </p>
     *
     * @param container
     *            the container.
     */
    def apply(container: Container) = {
        for (i <- 0 until container.getComponentCount()) {
            val comp = container.getComponent(i)
            if (comp.isInstanceOf[JTextComponent])
                comp.asInstanceOf[JTextComponent].setComponentPopupMenu(instance)
            else if (comp.isInstanceOf[Container])
                apply(comp.asInstanceOf[Container])
        }// for
    }// apply()

}// JEditorPopupMenu

/**
 * Editor popup menu for {@link JTextComponent}.
 *
 * @author Hai Bison
 * @since v1.6 beta
 */
class JEditorPopupMenu extends JPopupMenu {

    import JEditorPopupMenu._

    /**
     * Auto-generated by Eclipse.
     */
    private lazy final val serialVersionUID = 5578010916105435603L

    /**
     * Extended class of {@link TextAction}.
     *
     * @author Hai Bison
     * @since v1.6 beta
     */
    abstract class TextActionEx(name: String) extends TextAction(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = 852449530907004277L

        /**
         * Checks whether this action is enabled with {@code component}.
         *
         * @param component
         *            the owner component of this action.
         * @return {@code true} or {@code false}.
         */
        def isEnabledWith(component: JTextComponent): Boolean

    }// TextActionEx

    initMenuItems()

    /**
     * Initializes all menu items.
     */
    private def initMenuItems() = {
        val itemSeparator = "-"
        val itemTitles = Array(
            Messages.getString(R.string.context_menu_cut),
            Messages.getString(R.string.context_menu_copy),
            Messages.getString(R.string.context_menu_copy_all),
            Messages.getString(R.string.context_menu_paste),
            itemSeparator,
            Messages.getString(R.string.context_menu_clear_and_paste),
            Messages.getString(R.string.context_menu_clear),
            Messages.getString(R.string.context_menu_delete),
            itemSeparator,
            Messages.getString(R.string.context_menu_select_all))
        val itemActions =Array(
            new CutAction(itemTitles[0]),
            new CopyAction(itemTitles[1]),
            new CopyAllAction(itemTitles[2]),
            new PasteAction(itemTitles[3]), null,
            new ClearAndPasteAction(itemTitles[4]),
            new ClearAction(itemTitles[5]),
            new DeleteAction(itemTitles[6]), null,
            new SelectAllAction(itemTitles[7]))
        for (i <- 0 until itemTitles.length) {
            if (itemTitles(i).equals(itemSeparator)) {
                add(new JPopupMenu.Separator())
            } else {
                var menuItem = new JMenuItem()
                menuItem.setAction(itemActions(i))
                menuItem.setText(itemTitles(i))
                menuItem.setToolTipText(itemTitles(i))
                add(menuItem)
            }
        }// for
    }// initMenuItems()

    /**
     * Fires an action... (TODO ???)
     *
     * @param actionName
     *            the action name.
     */
    private def fireAfterActionPerformed(actionName: String) = {
        var invoker = getInvoker()
        if (invoker != null)
            invoker.firePropertyChange(actionName, 0, 1)
    }// fireAfterActionPerformed()

    /*
     * EDITOR ACTIONS
     */

    /**
     * The CUT action.
     */
    private class CutAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = -1982804538265472293L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        textComponent.cut()
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_CUT)
                    }
                }
            }

        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent): Boolean =
            !component.isInstanceOf[JPasswordField]
                && component.isEnabled() && component.isEditable()
                && !Texts.isEmpty(component.getSelectedText())

    }// CutAction

    /**
     * The COPY action.
     */
    private class CopyAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = -3254837350008467760L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        textComponent.copy()
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_COPY)
                    }
                }
            }
        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent): Boolean =
            !component.isInstanceOf[JPasswordField] && component.isEnabled()
                && !Texts.isEmpty(component.getSelectedText())

    }// CopyAction

    /**
     * The COPY ALL action.
     */
    private class CopyAllAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = 4615951043416333486L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        textComponent.selectAll()
                        textComponent.copy()
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_COPY_ALL)
                    }
                }
            }
        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent) =
            !component.isInstanceOf[JPasswordField] && component.isEnabled()
                && !Texts.isEmpty(component.getText())

    }// CopyAllAction

    /**
     * PASTE action.
     *
     * @author Hai Bison
     */
    private class PasteAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = 7589082114137081076L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        textComponent.paste()
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_PASTE)
                    }
                }
            }
        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent): Boolean = {
            if (component.isEnabled() && component.isEditable()) {
                var clipboard: CharSequence = null
                try {
                    clipboard = Toolkit.getDefaultToolkit().getSystemClipboard()
                        .getData(DataFlavor.stringFlavor).toString()
                } catch {
                    case t: Throwable => clipboard = null
                }

                !Texts.isEmpty(clipboard)
            } else false
        }// isEnabledWith()

    }// PasteAction

    /**
     * CLEAR action.
     *
     * @author Hai Bison
     */
    private class ClearAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = 2003384687851877644L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        textComponent.setText(null)
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_CLEAR)
                    }
                }
            }
        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent): Boolean =
            component.isEnabled() && component.isEditable()
                && !Texts.isEmpty(component.getText())

    }// ClearAction

    /**
     * DELETE action.
     *
     * @author Hai Bison
     */
    private class DeleteAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = 7226805445589511342L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        var start = textComponent.getSelectionStart()
                        var end = textComponent.getSelectionEnd()
                        if (end > start) {
                            try {
                                var text = textComponent.getText()
                                if (end <= text.length()) {
                                    text = text.substring(0, start) + text.substring(end)
                                    textComponent.setText(text)
                                    textComponent.setCaretPosition(start)
                                }
                            } catch {
                                case e: Exception => return
                            }
                        }
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_DELETE)
                    }
                }
            }
        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent): Boolean =
            component.isEnabled() && component.isEditable()
                && !Texts.isEmpty(component.getSelectedText())

    }// DeleteAction

    /**
     * CLEAR AND PASTE action.
     *
     * @author Hai Bison
     */
    private class ClearAndPasteAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = -2872364748582253016L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        textComponent.setText(null)
                        textComponent.paste()
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_CLEAR_AND_PASTE)
                    }
                }
            }
        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent): Boolean =
            component.isEnabled() && component.isEditable()

    }// ClearAndPasteAction

    /**
     * SELECT ALL action.
     *
     * @author Hai Bison
     */
    private class SelectAllAction(name: String) extends TextActionEx(name) {

        /**
         * Auto-generated by Eclipse.
         */
        private lazy final val serialVersionUID = 4749618930737855868L

        override def actionPerformed(e: ActionEvent) = {
            if (e.getSource().isInstanceOf[JMenuItem]) {
                if (e.getSource().asInstanceOf[JMenuItem].getParent()
                        .isInstanceOf[JPopupMenu]) {
                    var popupMenu = e.getSource().asInstanceOf[JMenuItem]
                        .getParent().asInstanceOf[JPopupMenu]
                    if (popupMenu.getInvoker().isInstanceOf[JTextComponent]) {
                        var textComponent = popupMenu.getInvoker()
                            .asInstanceOf[JTextComponent]
                        textComponent.selectAll()
                        textComponent.requestFocusInWindow()

                        fireAfterActionPerformed(ACTION_NAME_SELECT_ALL)
                    }
                }
            }
        }// actionPerformed()

        override def isEnabledWith(component: JTextComponent): Boolean =
            component.isEnabled() && !Texts.isEmpty(component.getText())

    }// SelectAllAction()

    override protected def firePopupMenuWillBecomeVisible() = {
        /*
         * Checks the source invoker component and fix its actions' state.
         */

        val invoker = getInvoker()
        if (invoker.isInstanceOf[JTextComponent]) {
            for (i <- 0 until getComponentCount()) {
                var comp = getComponent(i)
                if (comp.isInstanceOf[JMenuItem]) {
                    var action = comp.asInstanceOf[JMenuItem].getAction()
                        .asInstanceOf[TextActionEx]
                    action.setEnabled(
                        action.isEnabledWith(invoker.asInstanceOf[JTextComponent]))
                }
            }// for
        }// if
    }// firePopupMenuWillBecomeVisible()

}
