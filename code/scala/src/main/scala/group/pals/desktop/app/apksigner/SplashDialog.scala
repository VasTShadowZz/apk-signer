/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */

package group.pals.desktop.app.apksigner

import group.pals.desktop.app.apksigner.i18n.Messages
import group.pals.desktop.app.apksigner.i18n.R
import group.pals.desktop.app.apksigner.utils.L
import group.pals.desktop.app.apksigner.utils.Preferences
import group.pals.desktop.app.apksigner.utils.Sys
import group.pals.desktop.app.apksigner.utils.ui.UI

import java.awt.BorderLayout
import java.awt.Color
import java.awt.EventQueue
import java.util.Locale

import javax.swing.ImageIcon
import javax.swing.JDialog
import javax.swing.JLabel
import javax.swing.SwingConstants
import javax.swing.SwingWorker
import javax.swing.UIManager
import javax.swing.UnsupportedLookAndFeelException

import de.muntjak.tinylookandfeel.Theme
import de.muntjak.tinylookandfeel.ThemeDescription
import de.muntjak.tinylookandfeel.TinyLookAndFeel

import scala.swing._

/**
 * Splash dialog.
 *
 * @author Hai Bison
 * @since v1.8 beta
 *
 */
object SplashDialog extends SimpleSwingApplication {

    /**
     * Auto-generated by Eclipse.
     */
    private lazy final val serialVersionUID = -5559071516714940599L

    /**
     * @see javax.swing.plaf.basic.BasicLookAndFeel
     */
    private lazy final val FONT_KEYS = Array("Button.font",
        "ToggleButton.font", "RadioButton.font", "CheckBox.font",
        "ColorChooser.font", "ComboBox.font", "Label.font", "List.font",
        "MenuBar.font", "MenuItem.font", "RadioButtonMenuItem.font",
        "CheckBoxMenuItem.font", "Menu.font", "PopupMenu.font",
        "OptionPane.font", "Panel.font", "ProgressBar.font",
        "ScrollPane.font", "Viewport.font", "Slider.font", "Spinner.font",
        "TabbedPane.font", "Table.font", "TableHeader.font",
        "TextField.font", "FormattedTextField.font", "PasswordField.font",
        "TextArea.font", "TextPane.font", "EditorPane.font",
        "TitledBorder.font", "ToolBar.font", "ToolTip.font", "Tree.font")

    /**
     * Launch the application.
     */
    //    public static void main(String[] args) {
    //        EventQueue.invokeLater(new Runnable() {
    //
    //            public void run() {
    //                try {
    //                    final SplashDialog splashDialog = new SplashDialog()
    //                    splashDialog
    //                            .setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE)
    //                    splashDialog.setVisible(true)
    //                    splashDialog.start()
    //                } catch (Exception e) {
    //                    e.printStackTrace()
    //                }
    //            }// run()
    //        })
    //    }// main()

    /*
     * CONTROLS
     */

    private var mLabelInfo: Label = null

    /**
     * Loads the application.
     *
     * @author Hai Bison
     *
     */
    private class Loader(frame: Frame) extends SwingWorker[Void, String] {

        override protected def doInBackground(): Void = {
            publish(Messages.getString(R.string.msg_html_loading))

            L.i(Messages.getString(R.string.pmsg_app_name, Sys.APP_NAME,
                Sys.APP_VERSION_NAME))

            Locale.setDefault(Locale.forLanguageTag(Preferences.localeTag))
            publish(Messages.getString(R.string.msg_html_loading_language))

            /*
             * THEME
             */

            publish(Messages.getString(R.string.msg_html_loading_fonts))
            for (fontKey <- FONT_KEYS)
                UIManager.put(fontKey, Assets.defaultFont())
            Assets.defaultMonoFont()

            publish(Messages.getString(R.string.msg_html_loading_theme))
                def loadTheme(): Unit = {
                    try {
                        var availableThemes = Theme.getAvailableThemes()
                        for (td <- availableThemes) {
                            if (td.getURL().toString().matches("(?i).*nightly.*")) {
                                Theme.loadTheme(td)
                                UIManager.setLookAndFeel(new TinyLookAndFeel())
                                // SwingUtilities.updateComponentTreeUI(mMainFrame)
                                return
                            } // if
                        } // for
                    } catch {
                        case e: UnsupportedLookAndFeelException =>
                        /*
                 * Ignore it.
                 */
                    }
                } //loadTheme()
            loadTheme()

            /*
             * Start MainActivity.
             */

            publish(Messages.getString(R.string.msg_html_loading))

            var window = new MainActivity()
            frame.visible = false
            window.show()
            frame.dispose()

            null
        } // doInBackground()

        override protected def process(strings: List[String]): Unit = {
            mLabelInfo.text = strings(strings.size - 1)
            frame.pack()
        } // process()

    } // Loader

    override def top() = new Frame {
        peer.setUndecorated(true)
        iconImage = Assets.iconLogo()
        peer.
            getContentPane().setBackground(new Color(0, 0, 0, 0xcc))

        contents = new BorderPanel() {
            val logo = new ImageIcon(Assets.iconSplash())

            mLabelInfo = new Label(null, logo, Alignment.Center)
            mLabelInfo.verticalAlignment = Alignment.Top
            mLabelInfo.horizontalTextPosition = Alignment.Center
            mLabelInfo.verticalTextPosition = Alignment.Bottom
            mLabelInfo.foreground = new Color(0, 191, 255)
            mLabelInfo.font = mLabelInfo.font.deriveFont(
                mLabelInfo.font.getSize() - 3f)
            add(mLabelInfo, BorderPanel.Position.Center)

            pack()

            //UI.setWindowCenterScreen(this)

            val luckyNo = 51
            preferredSize = new java.awt.Dimension(luckyNo * 21, luckyNo * 9)
            minimumSize = preferredSize
            pack()
        }

        new Loader(this).execute()
    } //top

}
