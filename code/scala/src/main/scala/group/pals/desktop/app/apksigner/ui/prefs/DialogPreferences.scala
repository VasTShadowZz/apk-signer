/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */

package group.pals.desktop.app.apksigner.ui.prefs

import group.pals.desktop.app.apksigner.i18n.Messages
import group.pals.desktop.app.apksigner.i18n.R
import group.pals.desktop.app.apksigner.utils.Preferences
import group.pals.desktop.app.apksigner.utils.ui.JEditorPopupMenu
import group.pals.desktop.app.apksigner.utils.ui.UI

import java.awt.BorderLayout
import java.awt.Dialog
import java.awt.FlowLayout
import java.awt.Window
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.awt.event.KeyEvent
import java.awt.event.WindowAdapter
import java.awt.event.WindowEvent
import java.beans.Beans

import javax.swing.JButton
import javax.swing.JComponent
import javax.swing.JDialog
import javax.swing.JLabel
import javax.swing.JPanel
import javax.swing.JTabbedPane
import javax.swing.KeyStroke
import javax.swing.SwingUtilities
import javax.swing.WindowConstants
import javax.swing.border.EmptyBorder

/**
 * The preferences dialog.
 *
 * @author Hai Bison
 *
 */
class DialogPreferences(owner: Window) extends
        JDialog(owner, Messages.getString(R.string.settings),
                Dialog.ModalityType.APPLICATION_MODAL) {

    /**
     * Auto-generated by Eclipse.
     */
    private lazy final val serialVersionUID = -2538536937457934560L

    /**
     * The class name.
     */
    private lazy final val CLASSNAME = classOf[DialogPreferences].getName()

    /**
     * This key holds the last tab index.
     */
    private lazy final val PKEY_LAST_TAB_INDEX = CLASSNAME + ".last_tab_index"

    /*
     * CONTROLS
     */

    private final val mContentPanel = new JPanel()
    private var mTabbedPane: JTabbedPane = null

    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE)

    getRootPane().registerKeyboardAction(new ActionListener() {

        override def actionPerformed(e: ActionEvent) = {
            if (JEditorPopupMenu.instance.isShowing())
                JEditorPopupMenu.instance.setVisible(false)
            else
                closeDialog(false)
        }// actionPerformed()

    }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_IN_FOCUSED_WINDOW)

    setBounds(0, 0, 630, 270)
    getContentPane().setLayout(new BorderLayout(10, 10))
    mContentPanel.setLayout(new FlowLayout())
    mContentPanel.setBorder(new EmptyBorder(5, 5, 5, 5))
    getContentPane().add(mContentPanel, BorderLayout.SOUTH) {
        var buttonPane = new JPanel()
        buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT))
        getContentPane().add(buttonPane, BorderLayout.SOUTH) {
            var okButton = new JButton(Messages.getString(R.string.ok))
            okButton.addActionListener(mBtnOkActionListener)
            buttonPane.add(okButton)
            getRootPane().setDefaultButton(okButton)
        }
        {
            var cancelButton = new JButton(Messages.getString(R.string.cancel))
            cancelButton.addActionListener(mBtnCancelActionListener)
            buttonPane.add(cancelButton)
        }
    }
    {
        mTabbedPane = new JTabbedPane(JTabbedPane.TOP)
        getContentPane().add(mTabbedPane, BorderLayout.CENTER)
        UI.initJTabbedPaneHeaderMouseWheelListener(mTabbedPane)
    }
    {
        var lblNewLabel = new JLabel(Messages.getString(
            R.string.pmsg_sensitive_data_encryption, Preferences.PREFS_FILENAME))
        lblNewLabel.setBorder(new EmptyBorder(10, 10, 10, 10))
        getContentPane().add(lblNewLabel, BorderLayout.NORTH)
    }

    /*
     * CUSTOM INITIALIZATIONS
     */

    addWindowListener(mWindowAdapter)
    Preferences.instance.beginTransaction()
    initTabs()
    pack()

    /**
     * Initializes tabs.
     */
    private def initTabs() = {
        if (Beans.isDesignTime()) return

        /*
         * Initialization of panels are slow. So we should put this block into a
         * `Runnable`.
         */
        SwingUtilities.invokeLater(new Runnable() {

            override def run() = {
                mTabbedPane.add(
                    Messages.getString(R.string.internet_connection),
                    new PanelInternetConnection())

                /*
                 * Select the last tab index.
                 */

                var lastTabIndex = 0
                try {
                    lastTabIndex = Integer.parseInt(Preferences.instance
                        .get(PKEY_LAST_TAB_INDEX))
                } catch {
                    case e: Exception =>
                        /*
                        * Ignore it.
                        */
                }

                if (lastTabIndex >= mTabbedPane.getTabCount())
                    lastTabIndex = mTabbedPane.getTabCount() - 1
                if (lastTabIndex < 0)
                    lastTabIndex = 0

                mTabbedPane.setSelectedIndex(lastTabIndex)
            }// run()

        })
    }// initTabs()

    /**
     * Closes this dialog.
     *
     * @param commitTransaction
     *            {@code true} or {@code false}.
     */
    def closeDialog(commitTransaction: Boolean) = {
        if (commitTransaction)
            Preferences.instance.endTransaction()
        else
            Preferences.instance.cancelTransaction()

        dispatchEvent(new WindowEvent(
            DialogPreferences.this, WindowEvent.WINDOW_CLOSING))
    }// closeDialog()

    /*
     * LISTENERS
     */

    private final val mWindowAdapter = new WindowAdapter() {

        override def windowClosing(e: WindowEvent) = {
            Preferences.instance.set(PKEY_LAST_TAB_INDEX,
                mTabbedPane.getSelectedIndex().toString())
            Preferences.instance.store()
        }// windowClosing()

    }// mWindowAdapter

    private final val mBtnOkActionListener = new ActionListener() {

        override def actionPerformed(e: ActionEvent) = {
            for (i <- 0 until mTabbedPane.getTabCount()) {
                if (!mTabbedPane.getComponentAt(i).asInstanceOf[PreferencesFrame].store()) {
                    mTabbedPane.setSelectedIndex(i)
                    return
                }
            }

            closeDialog(true)
        }// actionPerformed()

    }// mBtnOkActionListener

    private final val mBtnCancelActionListener = new ActionListener() {

        override def actionPerformed(e: ActionEvent) = closeDialog(false)

    }// mBtnCancelActionListener

}
